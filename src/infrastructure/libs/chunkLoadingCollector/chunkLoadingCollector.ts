import {CssAssetsExtractorType, ImportedStatsType} from './chunkLoadingCollector.types';

type ChunkLoadingCollectorType = {
    /**
     * shouldBeLoadedStyles contains "webpackChunkName" keys
     */
    shouldBeLoadedStyles: Set<string>;
    // stats generated by 'webpack-imported' plugin
    stats: ImportedStatsType;
    collect: (chunkName: string) => void;
    cssAssetsExtractor: CssAssetsExtractorType;
    initStats: (stats: ImportedStatsType) => ChunkLoadingCollectorType;
};

/**
 * ChunkLoadingCollector class which control 'really' loaded css chunks on ssr
 */
export class ChunkLoadingCollector implements ChunkLoadingCollectorType {
    shouldBeLoadedStyles: Set<string> = new Set();
    stats: ImportedStatsType;
    cssAssetsExtractor: CssAssetsExtractorType;

    /**
     * constructor
     * connect all methods to class context becuase we want to call it by itself
     */
    constructor(cssAssetsExtractor: CssAssetsExtractorType) {
        this.cssAssetsExtractor = cssAssetsExtractor;
        this.collect = this.collect.bind(this);
        this.extractStatsFromChunk = this.extractStatsFromChunk.bind(this);
        this.initStats = this.initStats.bind(this);
    }

    /**
     * extractStatsFromChunk method which extracts styles to load from stats
     * @param chunkName
     * @returns
     */
    extractStatsFromChunk(chunkName: string[]) {
        console.log('extractStatsFromChunk', this.cssAssetsExtractor, {
            chunkName,
            importedStats: Object.keys(this.stats),
            chunkAssets: this.stats.chunks[chunkName[0]],
        });
        const {styles} = this.cssAssetsExtractor(this.stats, chunkName);

        console.log({styles});

        return styles.load;
    }

    /**
     * collect method which used for jsut collecting "chunkName"'s stats
     * @param chunkName
     * @returns
     */
    collect(...chunkName: string[]) {
        try {
            const stats = this.extractStatsFromChunk(chunkName);

            if (!stats) return;

            // to Load chunks
            stats.forEach(chunk => {
                this.shouldBeLoadedStyles.add(chunk);
            });
        } catch (error) {
            if (process.env.NODE_ENV === 'development')
                // eslint-disable-next-line no-console
                console.error(`Some error occured in ChunkLoadingCollector`, {error});
        }
    }

    /**
     * initStats method which initialize stats for concrete build
     * @param stats
     * @returns
     */
    initStats(stats: ImportedStatsType) {
        // @TODO load all init bundle styles
        // initially set means
        this.stats = stats;
        return this;
    }
}